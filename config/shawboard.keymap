/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 900  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 10    // default: 10

#include <dt-bindings/zmk/pointing.h>
#include <input/processors.dtsi>

/* macros
*/

/ {
    macros {
        Macro_HRM_1: Macro_HRM_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(H) &kp E &kp L &kp L>;
            label = "MACRO_HRM_1";
        };

        copy_find: copy_find {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(C) &kp LC(F) &kp LC(V) &kp ENTER>;
            label = "COPY_FIND";
        };

        copy_to_new_tab: copy_to_new_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(C) &kp LG(D) &kp LG(N1) &macro_wait_time 150 &kp LC(T) &kp LC(V) &kp ENTER>;
            label = "COPY_TO_NEW_TAB";
        };

        boiler_plate: boiler_plate {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp M &kp P>;
            label = "BOILER_PLATE";
        };

    };
};


&mt {
    flavor = "balanced";
   tapping_term_ms = <275>;
};
&lt {
   flavor = "tap-preferred";
    tapping_term_ms = <300>;
};

/ { 

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <40>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        }; 

        combo_tilde {
            timeout-ms = <40>;
            key-positions = <1 2>;
            bindings = <&kp GRAVE>;
        };        
        combo_bspcl {
            timeout-ms = <40>;
            key-positions = <3 4>;
            bindings = <&kp BSPC>;
        };
           combo_tab {
            timeout-ms = <40>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };


           combo_word {
            timeout-ms = <40>;
            key-positions = <5 6 7>;
            bindings = <&kp LC(BSPC)>;
        };









        combo_bspc {
            timeout-ms = <40>;
            key-positions = <6 7>;
            bindings = <&kp BSPC>;
        };

           combo_del {
            timeout-ms = <40>;
            key-positions = <7 8>;
            bindings = <&kp DEL>;
        };
           combo_pipe {
            timeout-ms = <40>;
            key-positions = <8 9>;
            bindings = <&kp BSLH>;
        };
        
           combo_dash {
            timeout-ms = <40>;
            key-positions = <15 16>;
            bindings = <&kp MINUS>;
        };


           combo_qmrk {
            timeout-ms = <40>;
            key-positions = <16 17>;
            bindings = <&kp SINGLE_QUOTE>;
        };


        combo_excl {
            timeout-ms = <40>;
            key-positions = <16 17 18>;
            bindings = <&kp EXCL>;
        };

           combo_lpar {
            timeout-ms = <40>;
            key-positions = <26 27>;
            bindings = <&kp LPAR>;
        };

           combo_rpar {
            timeout-ms = <40>;
            key-positions = <27 28>;
            bindings = <&kp RPAR>;
        };
           combo_lbr {
            timeout-ms = <40>;
            key-positions = <25 26 27>;
            bindings = <&kp LEFT_BRACKET>;
        };

           combo_rbr {
            timeout-ms = <40>;
            key-positions = <26 27 28>;
            bindings = <&kp RIGHT_BRACKET>;
        };
    };






    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&lt 5 Q      &lt 6 W      &kp E        &kp R       &lt 3 T     &kp Y                       &kp U          &kp I       &kp O        &kp P
&mt LSHFT A  &mt LCTRL S  &mt LALT D   &mt LGUI F  &lt 4 G     &kp H                       &mt RGUI J     &mt RALT K  &mt RCTRL L  &mt RSHFT SEMI
&mt LCTRL Z  &kp X        &kp C        &lt 1 V     &lt 2 B     &kp N                       &kp M          &kp COMMA   &kp DOT      &mt LCTRL FSLH
                          &lt 6 SPACE  &kp LALT    &kp LGUI    &mt LC(LS(LA(LGUI))) SPACE  &mt LCTRL RET  &kp RALT
            >;
        };

        symbol_layer {
            bindings = <
&kp EXCL  &kp AT_SIGN  &kp DLLR         &none            &kp PERCENT    &kp CARET        &kp AMPS       &kp EQUAL  &kp LPAR  &kp RPAR
&kp TAB   &kp LC(S)    &kp DQT          &kp PIPE2        &kp HASH       &kp MINUS        &kp EQUAL      &kp LBKT   &kp RBKT  &kp DEL
&kp ESC   &kp TILDE    &kp NON_US_BSLH  &kp NON_US_HASH  &kp TILDE2     &kp MINUS        &kp GRAVE      &kp LBKT   &kp RBKT  &kp DEL
                       &to 0            &kp LALT         &kp LGUI       &mt LCTRL SPACE  &mt LCTRL RET  &to 0
            >;
        };

        numpad_layer {
            bindings = <
&kp F1        &kp F2   &kp F3   &kp F4    &none       &kp KP_MULTIPLY  &kp N7         &kp N8  &kp N9  &kp EQUAL
&mt LSHFT F5  &mt LCTRL F6   &mt LALT F7   &mt LGUI F8    &none       &kp KP_DOT       &mt RGUI N4         &mt RALT N5  &mt RCTRL N6  &mt RSHFT KP_MINUS
&mt LCTRL F9  &kp F10  &kp F11  &kp F12   &none       &kp N0           &kp N1         &kp N2  &kp N3  &mt LCTRL KP_DIVIDE
                       &to 3    &kp LALT  &kp LGUI    &mt LCTRL SPACE  &mt LCTRL RET  &to 0
            >;
        };

        Mayer_tap_layer {
            bindings = <
&kp HOME   &kp END  &kp PAGE_UP  &kp PAGE_DOWN  &kp K_APP    &kp LG(X)        &kp LG(C)      &kp UP    &kp LG(V)  &kp P
&kp LSHFT  &mt LCTRL S    &mt LALT D        &mt LGUI G        &none        &kp LG(Z)        &mt RGUI LEFT       &mt RALT DOWN  &mt RCTRL RIGHT  &kp RSHFT
&kp LCTRL  &kp X    &kp C        &kp V          &none        &kp RGUI         &none          &none     &none      &mt LCTRL RET
                    &to 4        &kp LALT       &kp LGUI     &mt LCTRL SPACE  &mt LCTRL RET  &to 0
            >;
        };

        Wayer_tap_layer {
            bindings = <
&kp HOME   &kp END  &kp PAGE_UP  &kp PAGE_DOWN  &kp K_APP    &kp LC(X)        &kp LC(C)      &kp UP    &kp LC(V)  &kp P
&kp LSHFT  &mt LCTRL S    &mt LALT D        &mt LGUI G          &none        &kp LC(Z)        &kp LEFT       &kp DOWN  &kp RIGHT  &kp RSHFT
&kp LCTRL  &kp X    &kp C        &kp V          &none        &kp RGUI         &none          &none     &none      &mt LCTRL RET
                    &to 3        &kp LALT       &kp LGUI     &mt LCTRL SPACE  &mt LCTRL RET  &to 0
            >;
        };

        bt_layer {
            bindings = <
&none      &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp C_VOLUME_UP       &kp C_VOLUME_DOWN     &kp C_MUTE    &none  &bt BT_CLR
&kp LSHFT  &out OUT_BLE  &out OUT_USB  &none         &none           &kp C_BRIGHTNESS_INC  &kp C_BRIGHTNESS_DEC  &none         &none  &kp RSHFT
&kp LCTRL  &bt BT_NXT    &bt BT_PRV    &none         &none           &none                 &none                 &none         &none  &bt BT_SEL 4
                         &to 0         &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2          &bt BT_SEL 3          &bt BT_SEL 4
            >;
        };

        ms_layer {
            bindings = <
&none  &none  &mkp LCLK  &mkp MCLK      &mkp RCLK           &mkp LCLK       &mkp LCLK       &mmv MOVE_UP    &mkp RCLK        &msc SCRL_UP
&none  &none  &none      &copy_find     &copy_to_new_tab    &mkp MCLK       &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN
&none  &none  &none      &boiler_plate  &Macro_HRM_1        &none           &msc SCRL_LEFT  &mkp MCLK       &msc SCRL_RIGHT  &none
              &none      &none          &none               &studio_unlock  &none           &none
            >;
        };

        extra1 { status = "reserved"; };

        extra2 { status = "reserved"; };
    };


  
};
